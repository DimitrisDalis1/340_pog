%{
    #include <stdio.h>
    int yyerror (char* yaccProvidedMessage);
    int yylex(void);

    extern int yylineno;
    extern char* yytext;
    extern FILE* yyin;

%}


%start program

%union{
    char* stringValue;
    int intValue;
    double doubleValue;
}

%expect 1

%token<stringValue> ID
%token<stringValue> STRING
%token<intValue> INT
%token<doubleValue> REAL
%token<stringValue> IF ELSE WHILE FOR FUNCTION RETURN BREAK CONTINUE AND NOT OR LOCAL TRUE FALSE NIL
%token<stringValue> ASSIGN PLUS MINUS MULT DIV PERC EQUAL NOT_EQUAL PLUS2 MINUS2 BIGGER SMALLER BIGGER_EQUAL SMALLER_EQUAL 
%token<stringValue> LEFTCURLY RIGHTCURLY LEFTBRACE RIGHTBRACE LEFTPAR RIGHTPAR SEMICOLON COMMA COLON COLON2 PERIOD PERIOD2

%left ASSIGN
%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%nonassoc BIGGER SMALLER BIGGER_EQUAL SMALLER_EQUAL
%left PLUS MINUS
%left MULT DIV PERC
%right NOT PLUS2 MINUS2 
%nonassoc UMINUS
%left PERIOD PERIOD2
%left LEFTBRACE RIGHTBRACE
%left LEFTPAR RIGHTPAR

%type stmt
%type lvalue
%type call
%type elist
%type callsuffix
%type normcall
%type funcdef
%type expr
%type objectdef
%type member
%type block
%type assignexpr
%type temp
%type methodcall
%type term
%type  primary
%type const
%type ifstmt whilestmt forstmt returnstmt


%%

program: stmt program  
	| ;

stmt:	expr SEMICOLON  
	|ifstmt
	|whilestmt
	|forstmt
	|returnstmt
	|BREAK SEMICOLON  
	|CONTINUE SEMICOLON 
	|block
	|funcdef
	|SEMICOLON ;

expr:	assignexpr  
	|expr PLUS expr 
	|expr MINUS expr	
	| expr MULT expr
	| expr DIV expr		
	| expr PERC expr
	| expr BIGGER expr
	| expr BIGGER_EQUAL expr
	| expr SMALLER expr
	| expr SMALLER_EQUAL expr
	| expr EQUAL expr
	| expr NOT_EQUAL expr
	| expr AND expr		
	| expr OR expr	
	|term ;

term: LEFTPAR expr RIGHTPAR 
	| MINUS expr 
	|NOT expr
	|PLUS2 lvalue
	|lvalue PLUS2
	|MINUS2 lvalue
	|lvalue MINUS2
	|primary;

primary: lvalue
	|call
	|objectdef
	|LEFTPAR funcdef RIGHTPAR
	|const ;

const: INT | REAL | STRING |NIL |TRUE |FALSE ;

assignexpr:	lvalue ASSIGN expr ;

lvalue:	ID  
	|LOCAL ID  
	|COLON2 ID  
	|member  ;

member: lvalue PERIOD ID 
	| lvalue LEFTBRACE expr RIGHTBRACE  
	| call PERIOD ID  
	| call LEFTBRACE expr RIGHTBRACE ;

call: call LEFTPAR elist RIGHTPAR  
	|lvalue callsuffix  
	|LEFTPAR funcdef RIGHTPAR LEFTPAR elist RIGHTPAR  
	 ;

elist: expr  
	|elist COMMA expr  
	| {};

objectdef: LEFTBRACE elist RIGHTBRACE  
	|LEFTBRACE indexed RIGHTBRACE  ;

indexed: indexedelem  
	|indexed COMMA indexedelem  ;

indexedelem: LEFTCURLY expr COLON expr RIGHTCURLY  ;

callsuffix: normcall  | methodcall;

methodcall: PERIOD2 ID LEFTPAR elist RIGHTPAR ;

normcall: LEFTPAR elist RIGHTPAR  ;

/*To parakatw exei MH dhmiourghmena dependencies*/
temp_id: ID | {};

funcdef: FUNCTION temp_id LEFTPAR idlist RIGHTPAR block   ;

idlist: ID | idlist COMMA ID  |  {};

temp: temp stmt | {}; 

block: LEFTCURLY temp RIGHTCURLY;

ifstmt: IF LEFTPAR expr RIGHTPAR stmt ELSE stmt
	|IF LEFTPAR expr RIGHTPAR stmt 
	;

whilestmt: WHILE LEFTPAR expr RIGHTPAR stmt ;

forstmt: FOR LEFTPAR elist SEMICOLON expr SEMICOLON elist RIGHTPAR stmt ;

returnstmt: RETURN SEMICOLON
	| RETURN expr SEMICOLON
	;

